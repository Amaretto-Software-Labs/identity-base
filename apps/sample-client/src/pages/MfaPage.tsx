import { useMemo, useState } from 'react'
import type { FormEvent } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import { useMfa } from '@identity-base/react-client'
import type { MfaVerifyRequest } from '../api/types'

interface MfaState {
  email?: string
  methods?: string[]
}

const CHALLENGEABLE_METHODS = new Set(['sms', 'email'])

export default function MfaPage() {
  const navigate = useNavigate()
  const location = useLocation()
  const mfaState = (location.state as MfaState) ?? {}
  const mfaHookResult = useMfa()
  console.log('MfaPage: useMfa hook result:', mfaHookResult)
  console.log('MfaPage: verifyChallenge function:', mfaHookResult.verifyChallenge)
  console.log('MfaPage: verifyChallenge type:', typeof mfaHookResult.verifyChallenge)
  const { sendChallenge, verifyChallenge, isLoading, error } = mfaHookResult

  const methods = useMemo(() => mfaState.methods ?? ['authenticator', 'recovery'], [mfaState.methods])
  const [method, setMethod] = useState<string>(methods[0] ?? 'authenticator')
  const [code, setCode] = useState('')
  const [message, setMessage] = useState<string | null>(null)

  const handleSendChallenge = async (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault()
    setMessage(null)

    if (!CHALLENGEABLE_METHODS.has(method)) {
      setMessage('Only email or SMS challenges can be dispatched.')
      return
    }

    try {
      await sendChallenge({ method: method as 'sms' | 'email' })
      setMessage(`Challenge for ${method.toUpperCase()} sent.`)
    } catch (err) {
      // Error is already handled by the useMfa hook
    }
  }

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    console.log('MfaPage.handleSubmit: Form submitted')
    event.preventDefault()
    setMessage(null)

    try {
      console.log('MfaPage.handleSubmit: About to call verifyChallenge with:', { code, method })
      await verifyChallenge({
        code,
        method: method as MfaVerifyRequest['method'],
      })
      console.log('MfaPage.handleSubmit: verifyChallenge completed successfully')
      setMessage('MFA verification successful. Redirecting…')

      setTimeout(() => navigate('/', { replace: true }), 750)
    } catch (err) {
      console.log('MfaPage.handleSubmit: verifyChallenge failed with error:', err)
      // Error is already handled by the useMfa hook
    }
  }

  return (
    <div className="mx-auto max-w-md space-y-6">
      <header className="space-y-2">
        <h1 className="text-2xl font-semibold text-slate-900">Multi-factor Verification</h1>
        <p className="text-sm text-slate-600">
          Enter the verification code generated by your selected second factor. You can request a new SMS or email challenge.
        </p>
      </header>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-slate-700" htmlFor="method">
            Method
          </label>
          <select
            id="method"
            value={method}
            onChange={(event) => setMethod(event.target.value)}
            className="mt-1 w-full rounded-md border border-slate-300 px-3 py-2 shadow-sm focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-200"
          >
            {methods.map((item) => (
              <option key={item} value={item}>
                {item.toUpperCase()}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-slate-700" htmlFor="code">
            Verification code
          </label>
          <input
            id="code"
            type="text"
            inputMode="numeric"
            autoComplete="one-time-code"
            required
            value={code}
            onChange={(event) => setCode(event.target.value)}
            className="mt-1 w-full rounded-md border border-slate-300 px-3 py-2 shadow-sm focus:border-slate-500 focus:outline-none focus:ring-2 focus:ring-slate-200"
          />
        </div>

        <div className="text-right">
          <button
            type="button"
            onClick={handleSendChallenge}
            className="text-sm font-medium text-slate-700 underline decoration-slate-400 hover:text-slate-900"
          >
            Send challenge
          </button>
        </div>

        {error && <p className="text-sm text-red-600">{renderError(error)}</p>}
        {message && <p className="text-sm text-green-600">{message}</p>}

        <button
          type="submit"
          disabled={isLoading}
          className="w-full rounded-md bg-slate-900 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-slate-800 disabled:cursor-not-allowed disabled:opacity-70"
        >
          {isLoading ? 'Verifying…' : 'Verify'}
        </button>
      </form>

      {mfaState.email && (
        <p className="text-xs text-slate-500">Signing in as {mfaState.email}</p>
      )}
    </div>
  )
}

function renderError(error: unknown) {
  if (!error) return 'Unexpected error'
  if (typeof error === 'string') return error
  if (typeof error === 'object' && error !== null) {
    const maybeProblem = error as { detail?: string; title?: string; errors?: Record<string, string[]> }
    if (maybeProblem.errors) {
      return Object.entries(maybeProblem.errors)
        .map(([key, messages]) => `${key}: ${messages.join(', ')}`)
        .join('\n')
    }
    return maybeProblem.detail ?? maybeProblem.title ?? 'Unexpected error'
  }
  return 'Unexpected error'
}
