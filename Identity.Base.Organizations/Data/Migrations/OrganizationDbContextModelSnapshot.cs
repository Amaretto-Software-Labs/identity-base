// <auto-generated />
using System;
using Identity.Base.Organizations.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Identity.Base.Organizations.Data.Migrations
{
    [DbContext(typeof(OrganizationDbContext))]
    partial class OrganizationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Identity.Base.Organizations.Domain.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ArchivedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("Metadata")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "DisplayName")
                        .IsUnique()
                        .HasDatabaseName("IX_Organizations_Tenant_DisplayName");

                    b.HasIndex("TenantId", "Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_Organizations_Tenant_Slug");

                    b.ToTable("Identity_Organizations", (string)null);
                });

            modelBuilder.Entity("Identity.Base.Organizations.Domain.OrganizationMembership", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OrganizationId", "UserId");

                    b.HasIndex("UserId", "TenantId")
                        .HasDatabaseName("IX_OrganizationMemberships_User_Tenant");

                    b.ToTable("Identity_OrganizationMemberships", (string)null);
                });

            modelBuilder.Entity("Identity.Base.Organizations.Domain.OrganizationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsSystemRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId", "OrganizationId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_OrganizationRoles_Tenant_Organization_Name");

                    b.ToTable("Identity_OrganizationRoles", (string)null);
                });

            modelBuilder.Entity("Identity.Base.Organizations.Domain.OrganizationRoleAssignment", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OrganizationId", "UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_OrganizationRoleAssignments_Role");

                    b.HasIndex("UserId", "TenantId")
                        .HasDatabaseName("IX_OrganizationRoleAssignments_User_Tenant");

                    b.ToTable("Identity_OrganizationRoleAssignments", (string)null);
                });

            modelBuilder.Entity("Identity.Base.Organizations.Domain.OrganizationMembership", b =>
                {
                    b.HasOne("Identity.Base.Organizations.Domain.Organization", "Organization")
                        .WithMany("Memberships")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Identity.Base.Organizations.Domain.OrganizationRole", b =>
                {
                    b.HasOne("Identity.Base.Organizations.Domain.Organization", "Organization")
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Identity.Base.Organizations.Domain.OrganizationRoleAssignment", b =>
                {
                    b.HasOne("Identity.Base.Organizations.Domain.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Base.Organizations.Domain.OrganizationRole", "Role")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Base.Organizations.Domain.OrganizationMembership", "Membership")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("OrganizationId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("Organization");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Identity.Base.Organizations.Domain.Organization", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Identity.Base.Organizations.Domain.OrganizationMembership", b =>
                {
                    b.Navigation("RoleAssignments");
                });

            modelBuilder.Entity("Identity.Base.Organizations.Domain.OrganizationRole", b =>
                {
                    b.Navigation("RoleAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
